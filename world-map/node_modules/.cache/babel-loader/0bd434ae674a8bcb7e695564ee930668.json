{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\nimport { PdfStringLayouter } from './../../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../../document/pdf-document';\n/**\n * Class `lay outing the text`.\n *\n */\n\nvar PdfGridLayouter =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayouter, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridInitialWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.gridSize = new SizeF(0, 0);\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    _this.childheight = 0;\n    /**\n     * Check weather it is `child grid or not`.\n     * @private\n     */\n\n    _this.isChildGrid = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.hasRowSpanSpan = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.flag = true;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.columnRanges = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.currentLocation = new PointF(0, 0);\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    _this.slr = null;\n    _this.remainderText = null;\n    _this.isPaginate = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    _this.isOverloadWithPosition = false;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n    //Properties\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Constructors\n\n  /**\n   * Initializes a new instance of the `StringLayouter` class.\n   * @private\n   */\n  //Public methods\n\n  /**\n   * `Layouts` the text.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n  public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n  public layout(graphics : PdfGraphics, bounds : PointF) : void\n  public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n      if (graphics instanceof PdfGraphics) {\n      if (bounds instanceof PointF) {\n          if (bounds.x === 0) {\n              bounds.x = PdfBorders.default.right.width / 2;\n          }\n          if (bounds.y === 0) {\n              bounds.y = PdfBorders.default.top.width / 2;\n          }\n          let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n          this.layout(graphics, boundaries);\n      } else {\n          let width : number = graphics.clientSize.width;\n          let parameter : PdfLayoutParams = new PdfLayoutParams();\n          parameter.bounds = bounds;\n          this.currentGraphics = graphics;\n          if (graphics.layer != null) {\n              let index : number = 0;\n              if (this.currentGraphics.page instanceof PdfPage) {\n                  index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n              } else {\n                  index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n              }\n          } else {\n              this.layoutInternal(parameter);\n          }\n      }\n  }\n  }*/\n\n  /**\n   * Gets the `format`.\n   * @private\n   */\n\n  PdfGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutInternal = function (param) {\n    var format = this.getFormat(param.format);\n    this.gridLayoutFormat = this.getFormat(param.format);\n    this.currentPage = param.page;\n\n    if (this.currentPage !== null) {\n      var pageHeight = this.currentPage.getClientSize().height;\n      var pageWidth = this.currentPage.getClientSize().width;\n      this.currentPageBounds = this.currentPage.getClientSize();\n    } else {\n      throw Error('Can not set page as null'); //this.currentPageBounds = this.currentGraphics.clientSize;\n    }\n\n    this.currentGraphics = this.currentPage.graphics; //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n    // if (this.currentGraphics.layer !== null) {\n    //     let index : number = 0;\n    //     if (this.currentGraphics.page instanceof PdfPage) {\n    //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n    //     } else {\n    //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n    //     }\n    //     this.listOfNavigatePages.push(index);\n    // }\n\n    var index = 0;\n    index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n    this.listOfNavigatePages.push(index);\n\n    if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    } //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n\n\n    if (this.Grid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else if (this.Grid.headers.count !== 0) {\n      // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n      //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n      this.currentBounds.width = param.bounds.width;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y); // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n    //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n    //     this.currentBounds.width -= this.currentBounds.x;\n    // }\n    // if (this.Grid.isChildGrid) {\n    //     this.childheight = param.bounds.height;\n    // }\n    // if (param.format !== null && param.format.usePaginateBounds) {\n    //     if (param.format.paginateBounds.height > 0) {\n    //         this.currentBounds.height = param.format.paginateBounds.height;\n    //     }\n    //} else \n\n    if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n      this.currentBounds.height = param.bounds.height;\n    }\n\n    if (!this.Grid.isChildGrid) {\n      this.hType = this.Grid.style.horizontalOverflowType;\n    }\n\n    if (!this.Grid.style.allowHorizontalOverflow) {\n      this.columnRanges = [];\n\n      if (typeof this.Grid.isChildGrid !== 'undefined' && typeof this.Grid.isChildGrid) {\n        this.Grid.measureColumnsWidth(this.currentBounds);\n      } else {\n        this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));\n      }\n\n      this.columnRanges.push([0, this.Grid.columns.count - 1]);\n    } else {\n      this.Grid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    }\n\n    if (this.Grid.hasRowSpanSpan) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n          this.Grid.rows.getRow(i).isRowHeightSet = true;\n        }\n      }\n    }\n\n    var result = this.layoutOnPage(param);\n    return result;\n  }; // /* tslint:enable */\n\n  /**\n   * `Determines the column draw ranges`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n\n    for (var i = 0; i < this.Grid.columns.count; i++) {\n      cellWidths += this.Grid.columns.getColumn(i).width;\n\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.Grid.columns.getColumn(j).width;\n\n          if (subWidths > availableWidth) {\n            break;\n          }\n\n          endColumn = j;\n        }\n\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1;\n        endColumn = startColumn;\n        cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;\n      }\n    } // if (startColumn !== this.columns.Count) {\n\n\n    this.columnRanges.push([startColumn, this.Grid.columns.count - 1]); // }\n  };\n  /**\n   * `Layouts the on page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutOnPage = function (param) {\n    /* tslint:disable */\n    this.pageBounds.x = param.bounds.x;\n    this.pageBounds.y = param.bounds.y;\n    this.pageBounds.height = param.bounds.height;\n    var format = this.getFormat(param.format);\n    var endArgs = null;\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n    var isParentCell = false;\n    var cellBounds = [];\n\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n      this.currentBounds = returnObject.currentBounds;\n      this.currentRowIndex = returnObject.currentRowIndex; // if (returnObject.returnValue) {\n      //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n      //     break;\n      // }\n      //Draw Headers.\n\n      var drawHeader = void 0;\n\n      for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n        var row = this.Grid.headers.getHeader(i_1);\n        var headerHeight = this.currentBounds.y;\n        this.isHeader = true;\n\n        if (startPage != this.currentPage) {\n          for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {\n            if (row.cells.getCell(k).isCellMergeContinue) {\n              row.cells.getCell(k).isCellMergeContinue = false;\n              row.cells.getCell(k).value = \"\";\n            }\n          }\n        } // RowLayoutResult\n\n\n        var headerResult = this.drawRow(row);\n\n        if (headerHeight === this.currentBounds.y) {\n          drawHeader = true;\n\n          if (PdfGridLayouter.repeatRowIndex === -1) {\n            PdfGridLayouter.repeatRowIndex = i_1;\n          }\n        } else {\n          drawHeader = false;\n        }\n\n        if (!headerResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && drawHeader) {\n          this.startLocation.x = this.currentBounds.x;\n          this.currentPage = this.getNextPageformat(format);\n          this.startLocation.y = this.currentBounds.y;\n          if (typeof format.paginateBounds !== 'undefined' && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0) this.currentBounds.x += this.startLocation.x;\n          this.drawRow(row);\n        }\n\n        this.isHeader = false;\n      }\n\n      var i = 0;\n      var length_1 = this.Grid.rows.count;\n      var repeatRow = void 0;\n      var startingHeight = 0;\n      var flag = true; //Here is to draw parent Grid and Cells\n\n      cellBounds = []; //Draw row by row with the specified cell range.\n\n      for (var j = 0; j < this.Grid.rows.count; j++) {\n        var row = this.Grid.rows.getRow(j);\n        i++;\n        this.currentRowIndex = i - 1;\n        var originalHeight = this.currentBounds.y;\n        startPage = this.currentPage;\n        PdfGridLayouter.repeatRowIndex = -1;\n\n        if (flag && row.grid.isChildGrid) {\n          startingHeight = originalHeight;\n          flag = false;\n        }\n\n        var rowResult = null; ///rowResult = this.drawRow(row);\n\n        /*if(!row.isrowFinish) {\n            if(!row.grid.isgridSplit){\n                rowResult = this.drawRow(row);\n                row.isrowFinish = true;\n                row.isrowDraw = true;\n            } else {\n                if(!row.isrowDraw){\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                    row.isrowDraw = true;\n                    row.grid.isgridSplit = false;\n                } else {\n                    rowResult =  null;\n                    break;\n                }\n            }\n        }\n        else {\n            //row.isrowFinish = false;\n            //rowResult = this.drawRow(row);\n            rowResult = null;\n            break;\n            \n        }             */\n\n        if (this.Grid.splitChildRowIndex == -1) {\n          rowResult = this.drawRow(row);\n          row.isrowFinish = true;\n        } else {\n          if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n            rowResult = this.drawRow(row);\n            row.isrowFinish = true;\n          } else if (row.isrowFinish) {\n            continue;\n          } else {\n            break;\n          }\n        } //rowResult = this.drawRow(row);\n\n\n        cellBounds.push(rowResult.bounds.width);\n        /*if (row.isRowBreaksNextPage)\n            {\n                let x : number  = 0;\n                for (let l : number = 0; l < row.cells.count; l++)\n                {\n                    let isNestedRowBreak : boolean = false;\n                    if (row.height == row.cells.getCell(l).height)\n                    {\n                        let n : number;\n                        let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                        for (let m : number = grid.rows.count; 0 < m; m--)\n                        {\n                            if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                            {\n                                isNestedRowBreak = true;\n                                break;\n                            }\n                            if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                            {\n                                row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                break;\n                            }\n                            row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                        }\n                    }\n                    if (isNestedRowBreak)\n                        break;\n                }\n                for (let j : number = 0; j < row.cells.count; j++)\n                {\n                     if (row.height > row.cells.getCell(j).height)\n                    {\n                        row.cells.getCell(j).value = \" \";\n                        let rect : RectangleF ;\n                        let page : PdfPage = this.getNextPage(this.currentPage);\n                        let section : PdfSection = this.currentPage.section;\n                        let index : number = section.indexOf(page);\n                        for (let k : number = 0; k < (section.count - 1) - index; k++)\n                        {\n                            rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                            PdfGridLayouter.repeatRowIndex = -1;\n                            row.cells.getCell(j).draw(page.graphics, rect, false);\n                            page = this.getNextPage(page);\n                        }\n                        rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n                         row.cells.getCell(j).draw(page.graphics, rect, false);\n                    }\n                    x += row.grid.columns.getColumn(j).width;\n                }\n            }*/\n        //if height remains same, it is understood that row is not drawn in the page\n\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          PdfGridLayouter.repeatRowIndex = -1;\n        }\n\n        while (!rowResult.isFinish && startPage != null) {\n          var tempResult = this.getLayoutResult();\n          /*if (startPage != this.currentPage)\n              {\n                  if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                  {\n                      let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                      bounds.x += param.bounds.x;\n                      if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                      {\n                          bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                          if (bounds.height > this.currentPageBounds.height)\n                          {\n                              bounds.height = this.currentPageBounds.height - bounds.y;\n                              bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                          }\n                      }\n                      // Draw border for cells in the nested grid cell's row.\n                      for (let c : number = 0; c < row.cells.count; c++)\n                      {\n                          let cell : PdfGridCell = row.cells.getCell(c);\n                          let cellWidth :  number= 0;\n                          if (cell.columnSpan > 1)\n                          {\n                              for (; c < cell.columnSpan; c++)\n                                  cellWidth += row.grid.columns.getColumn(c).width;\n                          }\n                          else\n                              cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                          cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                          bounds.x += cellWidth;\n                          c += (cell.columnSpan - 1);\n                      }\n                  }\n              }\n              */\n\n          endArgs = this.raisePageLayouted(tempResult);\n          if (endArgs.cancel || repeatRow) break;else if (this.Grid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageformat(format);\n            originalHeight = this.currentBounds.y;\n            var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n\n            if (format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0 && this.startLocation.x === location_1.x && this.startLocation.y === location_1.y) {\n              this.currentBounds.x += this.startLocation.x;\n              this.currentBounds.y += this.startLocation.y;\n            }\n\n            if (this.isPaginate) {\n              this.startLocation.y = this.currentBounds.y;\n              this.isPaginate = false;\n            }\n\n            if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                  this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                }\n              }\n            }\n\n            if (row.grid.ParentCell != null) {\n              row.grid.ParentCell.row.isRowBreaksNextPage = true;\n              row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n\n              for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n              } //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n\n            }\n            /*if (row.noOfPageCount > 1)\n            {\n                let temp : number = row.rowBreakHeightValue;\n                for (let j : number = 1; j < row.noOfPageCount; j++)\n                {\n                    row.rowBreakHeightValue = 0;\n                    row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                    this.drawRow(row);\n                    this.currentPage = this.getNextPageformat(format);\n                    startPage = this.currentPage;\n                }\n                row.rowBreakHeightValue = temp;\n                row.noOfPageCount = 1;\n                rowResult = this.drawRow(row);\n            } else {\n                rowResult = this.drawRow(row);\n            }\n            /*if(row.grid.isChildGrid){\n                row.isrowFinish = false;\n                row.isrowDraw = false;\n                row.grid.isgridSplit = true;\n                row.grid.ParentCell.row.grid.isgridSplit = true;\n                //rowResult.isFinish = false;\n                break;\n            }*/\n\n\n            if (row.grid.isChildGrid) {\n              //row.grid.isgridSplit = true;\n              row.isrowFinish = false; //row.grid.ParentCell.row.grid.isgridSplit = true;\n\n              row.grid.splitChildRowIndex = row.rowIndex;\n              row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n\n              if (row.grid.ParentCell.row.grid.isGridSplit) {\n                row.grid.ParentCell.row.noOfPageCount += 1;\n                row.grid.ParentCell.row.grid.isGridSplit = false;\n              }\n\n              break;\n            }\n\n            if (row.noOfPageCount < 1) {\n              if (row.grid.splitChildRowIndex != -1) {\n                row.grid.isGridSplit = true;\n              }\n\n              if (row.style.border != null && (row.style.border.left != null && row.style.border.left.width !== 1 || row.style.border.top != null && row.style.border.top.width !== 1)) {\n                var x = row.style.border.left.width / 2;\n                var y = row.style.border.top.width / 2;\n\n                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                  var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                  this.currentBounds = newBound;\n                }\n              }\n\n              if (this.Grid.repeatHeader) {\n                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                  var headerRepeat = this.Grid.headers.getHeader(j_1);\n                  this.drawRow(headerRepeat);\n                }\n              }\n\n              rowResult = this.drawRow(row);\n\n              if (row.noOfPageCount >= 1) {\n                var temp = row.rowBreakHeightValue;\n\n                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                  //this.currentPage.section.add();\n                  var tempResult1 = this.getLayoutResult();\n                  endArgs = this.raisePageLayouted(tempResult1);\n                  this.currentPage = this.getNextPageformat(format);\n                  originalHeight = this.currentBounds.y; //row.rowBreakHeightValue = 0;\n\n                  if (row.grid.splitChildRowIndex != -1) {\n                    row.grid.isGridSplit = true;\n                  }\n\n                  this.currentBounds.y = 0.5;\n\n                  if (this.Grid.repeatHeader) {\n                    for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                      var header = this.Grid.headers.getHeader(i_3);\n                      this.drawRow(header);\n                    }\n                  } //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n\n\n                  this.drawRow(row);\n                } // row.rowBreakHeight = temp;\n                // row.noOfPageCount = 1;\n                // rowResult = this.drawRow(row);\n\n              }\n\n              row.grid.splitChildRowIndex = -1;\n              row.grid.isGridSplit = false;\n              rowResult.isFinish = this.checkIsFisished(row); //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n              //this.currentBounds.y = rowResult.bounds.y;\n\n              for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                  row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                }\n              }\n            }\n          } // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n          // {\n          //     this.currentPage = this.getNextPageformat(format);\n          //     break;\n          // }\n          // else if (i >= length)\n          //     break;\n        }\n\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          // During pagination, cell position is maintained here.\n          this.startLocation.x = this.currentBounds.x;\n          var isAddNextPage = false;\n          this.currentPage = this.getNextPageformat(format);\n          /*if (!this.Grid.isSingleGrid)\n          {\n              for ( let j : number= 0; j < this.Grid.rows.count; j++)\n              {\n                  let isWidthGreaterthanParent : boolean = false;\n                  for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                  {\n                      if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                          isWidthGreaterthanParent = true;\n                  }\n                  if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                  {\n                      isAddNextPage = true;\n                  }\n              }\n          }\n          if (!this.Grid.isRearranged && isAddNextPage)\n               {\n                   let section : PdfSection = this.currentPage.section;\n                   \n                   //this.currentPage = section.add();\n               \n                   this.currentGraphics = this.currentPage.graphics;\n                   this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                \n                   let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n               }\n               else\n               {\n                   this.currentPage = this.getNextPageformat(format);\n               }\n               if (format.paginateBounds.y == 0)\n                   this.currentBounds.y = PdfBorders.default.top.width/2;\n               else\n               {\n                   this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                   \n               }*/\n\n          if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {\n            break;\n          }\n\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n          }\n\n          if (typeof param.format !== 'undefined' && param.format != null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {\n            this.currentBounds.y = PdfBorders.default.top.width / 2;\n          } else {\n            this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n\n            if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {\n              this.currentBounds.x = format.paginateBounds.x;\n              this.currentBounds.width = format.paginateBounds.width;\n              this.currentBounds.height = format.paginateBounds.height;\n            }\n          }\n\n          if (typeof param.format !== 'undefined' && param.format !== null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.y = param.bounds.y;\n          }\n\n          this.startLocation.y = this.currentBounds.y;\n\n          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n\n          if (this.Grid.repeatHeader) {\n            for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n              var header = this.Grid.headers.getHeader(i_5);\n              this.drawRow(header);\n            }\n          }\n\n          this.drawRow(row);\n\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n\n        if (row.NestedGridLayoutResult != null) {\n          // Position for next row in the grid.\n          this.currentPage = row.NestedGridLayoutResult.page;\n          this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n\n          this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n          var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n          this.currentBounds.y = recalHeight; //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n\n          if (startPage != this.currentPage) {\n            var secion = this.currentPage.section;\n            var startIndex = secion.indexOf(startPage) + 1;\n            var endIndex = secion.indexOf(this.currentPage);\n\n            for (var page = startIndex; page < endIndex + 1; page++) {\n              var pageGraphics = this.currentPage.graphics;\n              var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n              var height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;\n              if (height <= pageGraphics.clientSize.height) height += param.bounds.y; // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n              //     location.x += param.bounds.x;\n\n              location_2.y = format == null ? 0.5 : format.paginateBounds.y; // Draw border for last paginated row containing nested grid.\n\n              for (var c = 0; c < row.cells.count; c++) {\n                var cell = row.cells.getCell(c);\n                var cellWidth = 0;\n                var totalwidth = 0;\n\n                if (cell.value instanceof PdfGrid) {\n                  for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                    totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                  }\n                } else {\n                  totalwidth = cell.width;\n                } // if (cell.columnSpan > 1)\n                // {\n                //     for (; c < cell.columnSpan; c++)\n                //         cellWidth += row.grid.columns.getColumn(c).width;\n                // }\n                // else\n\n\n                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                location_2.x += cellWidth;\n                c += cell.columnSpan - 1;\n              }\n            } // So, nested grid drawing is completed for the current row. Update page.\n            // Otherwise, the next nested grid of the parent will draw borders from start.\n\n\n            startPage = this.currentPage;\n          }\n        }\n      }\n\n      var isPdfGrid = false;\n      var maximumCellBoundsWidth = 0;\n\n      if (cellBounds.length > 0) {\n        maximumCellBoundsWidth = cellBounds[0];\n      }\n\n      var largeNavigatePage = [[1, 2]];\n\n      for (var c = 0; c < this.Grid.rows.count; c++) {\n        if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n          var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n          this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n          isPdfGrid = true; // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n          // {\n          //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n          // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n          // {\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n        }\n      }\n\n      if (!isPdfGrid && cellBounds.length > 0) {\n        for (var c = 0; c < i - 1; c++) {\n          if (maximumCellBoundsWidth < cellBounds[c]) {\n            maximumCellBoundsWidth = cellBounds[c];\n          }\n        }\n\n        this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n      } else {\n        this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n      }\n\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {\n        isParentCell = this.Grid.isChildGrid;\n\n        if (largeNavigatePage[0][0] != 0) {\n          var section = this.currentPage.section;\n          var pageIndex = section.indexOf(this.currentPage);\n          this.currentGraphics = this.currentPage.graphics;\n          this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n          var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        } else {\n          this.currentPage = this.getNextPageformat(format);\n        } // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n        // {\n        //     this.currentBounds.x += this.startLocation.x;\n        //     this.currentBounds.y += this.startLocation.y;\n        // }\n\n      }\n\n      if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageformat(format);\n\n        if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n          this.currentBounds.x += this.startLocation.x;\n          this.currentBounds.y += this.startLocation.y; //this.currentBounds.height = this.pageBounds.height;\n        }\n      }\n    }\n\n    result = this.getLayoutResult();\n\n    if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n\n    this.raisePageLayouted(result);\n    return result;\n  };\n\n  PdfGridLayouter.prototype.checkIsFisished = function (row) {\n    var result = true;\n\n    for (var i = 0; i < row.cells.count; i++) {\n      if (!row.cells.getCell(i).FinishedDrawingCell) {\n        result = false;\n      }\n    }\n\n    return result;\n  };\n  /* tslint:enable */\n\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getNextPageformat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    this.flag = false;\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    this.currentGraphics = nextPage.graphics;\n    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n\n    if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n      this.listOfNavigatePages.push(pageindex);\n    }\n\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n\n    if (typeof format !== 'undefined' && format != null && format.usePaginateBounds && typeof format.paginateBounds !== 'undefined' && format.paginateBounds != null && format.paginateBounds.x !== format.paginateBounds.y && format.paginateBounds.y !== format.paginateBounds.height && format.paginateBounds.height !== format.paginateBounds.width && format.paginateBounds.width !== 0) {\n      this.currentBounds.x = format.paginateBounds.x;\n      this.currentBounds.y = format.paginateBounds.y;\n      this.currentBounds.height = format.paginateBounds.height;\n    }\n\n    return nextPage;\n  };\n\n  PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n  /**\n   * `Raises BeforeCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n    var args = null;\n\n    if (this.Grid.raiseBeginCellDraw) {\n      args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n      this.Grid.onBeginCellDraw(args);\n      style = args.style;\n    }\n\n    return style;\n  };\n  /**\n   * `Raises AfterCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n    var args = null;\n\n    if (this.Grid.raiseEndCellDraw) {\n      args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n      this.Grid.onEndCellDraw(args);\n    }\n  };\n\n  PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutedPages.keys();\n    var values = layoutedPages.values();\n\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n    /* tslint:disable */\n\n\n    for (var i = 0; i < layoutedPages.size(); i++) {\n      var count = 0;\n\n      for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {\n        var page = pages[j];\n\n        if (typeof page !== 'undefined' && document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n    /* tslint:enable */\n\n  };\n  /**\n   * Gets the `layout result`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getLayoutResult = function () {\n    if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        var row = this.Grid.rows.getRow(i);\n\n        if (row.rowBreakHeight > 0 && row.repeatFlag) {\n          this.startLocation.y = this.currentPage.origin.y;\n        }\n      }\n    }\n\n    var bounds;\n\n    if (!this.isChanged) {\n      bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    } // else {\n    //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n    //                              this.currentLocation.y));\n    // }\n\n    /* tslint:enable */\n\n\n    return new PdfGridLayoutResult(this.currentPage, bounds);\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n    var newHeight = 0.0;\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' || typeof row.cells.getCell(i).remainingString === 'undefined')) {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n\n    return Math.max(height, newHeight);\n  };\n  /**\n   * `Raises BeforePageLayout event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n    var cancel = false;\n\n    if (this.Grid.raiseBeginPageLayout) {\n      var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n      this.Grid.onBeginPageLayout(args); // if (currentBounds !== args.Bounds) {\n      //     this.isChanged = true;\n      //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n      //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n      //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n      //                                                                 args.Bounds.height)));\n      // }\n\n      cancel = typeof args.cancel === 'undefined' ? false : args.cancel;\n      currentBounds = args.bounds;\n      currentRow = args.startRowIndex;\n    }\n\n    return {\n      returnValue: cancel,\n      currentBounds: currentBounds,\n      currentRowIndex: currentRow\n    };\n  };\n  /**\n   * `Raises PageLayout event` if needed.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n    var args = new PdfGridEndPageLayoutEventArgs(result);\n\n    if (this.Grid.raiseEndPageLayout) {\n      this.Grid.onEndPageLayout(args);\n    }\n\n    return args;\n  };\n\n  PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n    if (typeof result === 'undefined') {\n      //.. Check if required space available.\n      //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n      var result_1 = new RowLayoutResult();\n      var rowHeightWithSpan = 0;\n      var location_3 = new PointF(0, 0);\n      var size = new SizeF(0, 0);\n      var isHeader = false;\n\n      if (row.rowSpanExists) {\n        var maxSpan = 0;\n        var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n\n        if (currRowIndex === -1) {\n          currRowIndex = this.Grid.headers.indexOf(row);\n\n          if (currRowIndex !== -1) {\n            isHeader = true;\n          }\n        }\n\n        for (var i = 0; i < row.cells.count; i++) {\n          var cell = row.cells.getCell(i);\n          maxSpan = Math.max(maxSpan, cell.rowSpan);\n        }\n\n        for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n          rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;\n        } // let rowMaxHeight : number = rowHeightWithSpan;\n        // for (let i : number = 0; i < row.cells.count; i++ ) {\n        //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n        // }\n        // let flag : boolean = true;\n        // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n        // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n        //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n        //         flag = false;\n        //         break;\n        //     }\n        // }\n        // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n        //     row.height += (rowMaxHeight - rowHeightWithSpan);\n        // }                \n\n      }\n\n      var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n\n      if (typeof this.Grid.isChildGrid !== 'undefined' && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== 'undefined' && this.Grid.ParentCell != null) {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n        //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n        //     if (this.Grid.allowRowBreakAcrossPages) {\n        //         result.isFinish = true;\n        //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n        //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n        //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             }\n        //             this.currentBounds.x = this.startLocation.x;\n        //         }\n        //         result.bounds = this.currentBounds ;\n        //         this.drawRowWithBreak(result, row, calculatedHeight);\n        //     } else {\n        //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n        //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n        //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n        //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n        //         }\n        //         result.isFinish = false;\n        //         this.drawRow( row, result, calculatedHeight);\n        //     }\n        // } else\n        if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n          //If a row is repeated and still cannot fit in page, proceed draw.\n          if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== 'undefined' && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n            this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true; // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n              //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n              //     // }\n              //     this.currentBounds.x = this.startLocation.x;\n              // }\n\n              result_1.bounds = this.currentBounds;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n            } // else {\n            //     result.isFinish = false;\n            //     row.repeatFlag = false;\n            //     this.drawRow( row, result, calculatedHeight);\n            // }\n\n          } // else {\n          //     result.isFinish = false;\n          // }\n\n        } else {\n          result_1.isFinish = true;\n\n          if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n            row.repeatFlag = true;\n          } else {\n            row.repeatFlag = false;\n            calculatedHeight = row.height;\n          }\n\n          if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n            }\n          }\n\n          this.drawRow(row, result_1, calculatedHeight);\n        }\n      } else {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        if (calculatedHeight > this.currentPageBounds.height) {\n          if (this.Grid.allowRowBreakAcrossPages) {\n            result_1.isFinish = true; //result.bounds = this.currentBounds;\n\n            this.drawRowWithBreak(result_1, row, calculatedHeight);\n            row.isrowFinish = true;\n            row.repeatFlag = true;\n\n            if (row.grid.splitChildRowIndex !== -1) {\n              result_1.isFinish = false;\n            }\n          } // else {\n          //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          //     result.isFinish = false;\n          //     this.drawRow( row, result, calculatedHeight);\n          // }\n\n        } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n          // If a row is repeated and still cannot fit in page, proceed draw.\n          var isFit = false;\n\n          if (this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row.isRowHeightSet && !row.rowMergeComplete) {\n            if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {\n              isFit = this.isFitToCell(this.currentBounds.height + this.startLocation.y - this.currentBounds.y, this.Grid, row);\n            } else isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n\n            if (isFit) {\n              this.isPaginate = true;\n            }\n          } else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {\n            isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n            if (!isFit) isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);\n\n            if (isFit && this.slr != null && this.slr.lineCount > 1) {\n              //It may text cutoff issue\n              isFit = false;\n            }\n\n            this.remainderText = null;\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex || isFit) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n\n              if (row.grid.splitChildRowIndex !== -1) {\n                result_1.isFinish = false;\n              }\n            } else {\n              result_1.isFinish = false;\n              this.drawRow(row, result_1, calculatedHeight);\n            }\n          } else {\n            result_1.isFinish = false;\n          }\n        } else {\n          result_1.isFinish = true;\n          this.drawRow(row, result_1, calculatedHeight);\n          row.repeatFlag = false;\n        }\n      }\n\n      return result_1;\n    } else {\n      var skipcell = false;\n      var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y); // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n      //                 this.currentPage.getClientSize().width) {\n      //     location.x = this.startLocation.x;\n      // }\n\n      result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n      height = this.ReCalculateHeight(row, height);\n\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // let cancelSpans : boolean = false;\n\n        if (!cancelSpans) {\n          for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n\n        var size = new SizeF(this.Grid.columns.getColumn(i).width, height); // if (size.width > this.currentGraphics.clientSize.width) {\n        //     size.width = this.currentGraphics.clientSize.width;\n        // }\n        // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n        //     if (size.width >= this.currentGraphics.clientSize.width) {\n        //         size.width -= 2 * this.currentBounds.x;\n        //     }\n        // }\n\n        /* tslint:disable */\n\n        if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n          row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n        }\n\n        var cellstyle = row.cells.getCell(i).style;\n        var tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n        row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle); //row.cells.getCell(i).style = cellstyle;\n\n        if (!skipcell) {\n          if (row.cells.getCell(i).value instanceof PdfGrid) {\n            var grid = row.cells.getCell(i).value;\n            grid.parentCellIndex = i;\n          }\n\n          var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n\n          if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n            row.rowOverflowIndex = this.cellEndIndex;\n          }\n\n          if (row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n            row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== undefined ? stringResult.remainder : '' : '';\n            row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n            row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n            row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n          }\n        }\n        /* tslint:enable */\n\n\n        tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n\n        if (!cancelSpans) {\n          this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n        }\n\n        if (row.cells.getCell(i).value instanceof PdfGrid) {\n          var grid = row.cells.getCell(i).value;\n\n          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n            location_4.x = grid.rowLayoutBoundsWidth;\n            location_4.x += grid.style.cellSpacing;\n          } else {\n            location_4.x += this.Grid.columns.getColumn(i).width;\n          }\n        } else {\n          location_4.x += this.Grid.columns.getColumn(i).width;\n        }\n      }\n\n      if (!row.rowMergeComplete || row.isRowHeightSet) {\n        this.currentBounds.y += height;\n      }\n\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n    }\n  };\n\n  PdfGridLayouter.prototype.isFitToCell = function (currentHeight, grid, gridRow) {\n    var isFit = false;\n    var layouter = new PdfStringLayouter();\n\n    for (var i = 0; i < gridRow.cells.count; i++) {\n      var cell = gridRow.cells.getCell(i);\n\n      if (typeof cell.value !== 'undefined' && cell.value !== null && typeof cell.value === 'string') {\n        var font = null;\n\n        if (typeof cell.style.font !== 'undefined' && cell.style.font != null) {\n          font = cell.style.font;\n        } else if (typeof cell.row.style.font !== 'undefined' && cell.row.style.font != null) {\n          font = cell.row.style.font;\n        } else if (typeof cell.row.grid.style.font !== 'undefined' && cell.row.grid.style.font != null) {\n          font = cell.row.grid.style.font;\n        } else {\n          font = PdfDocument.defaultFont;\n        }\n\n        this.remainderText = gridRow.cells.getCell(i).value;\n        var width = gridRow.cells.getCell(i).width;\n\n        if (grid.columns.getColumn(i).isCustomWidth && gridRow.cells.getCell(i).width > grid.columns.getColumn(i).width) {\n          width = grid.columns.getColumn(i).width;\n        }\n\n        this.slr = layouter.layout(gridRow.cells.getCell(i).value, font, gridRow.cells.getCell(i).stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);\n        var height = this.slr.actualSize.height;\n\n        if (height == 0) {\n          isFit = false;\n          break;\n        }\n\n        if (gridRow.cells.getCell(i).style != null && gridRow.cells.getCell(i).style.borders != null && gridRow.cells.getCell(i).style.borders.top != null && gridRow.cells.getCell(i).style.borders.bottom != null) height += (gridRow.cells.getCell(i).style.borders.top.width + gridRow.cells.getCell(i).style.borders.bottom.width) * 2;\n        if (this.slr.lineCount > 1 && gridRow.cells.getCell(i).stringFormat != null && gridRow.cells.getCell(i).stringFormat.lineSpacing != 0) height += (this.slr.lineCount - 1) * gridRow.cells.getCell(i).style.stringFormat.lineSpacing;\n\n        if (gridRow.cells.getCell(i).style.cellPadding == null) {\n          height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;\n        } else {\n          height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;\n        }\n\n        height += grid.style.cellSpacing;\n\n        if (currentHeight > height || typeof this.slr.remainder !== 'undefined' && this.slr.remainder !== null) {\n          isFit = true;\n          break;\n        }\n      }\n    }\n\n    return isFit;\n  };\n\n  PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n\n    if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n      location.x = this.startLocation.x;\n    }\n\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0; // Calculate the remaining height.\n\n    if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n      row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n    } // else {\n    //     row.rowBreakHeight = calculateHeight;\n    //     result.isFinish = false;\n    //     return;\n    // }\n    // No need to explicit break if the row height is equal to grid height.\n\n\n    for (var i = 0; i < row.cells.count; i++) {\n      var cell = row.cells.getCell(i);\n      var cellHeight = cell.measureHeight();\n\n      if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n        row.rowBreakHeight = 0;\n      } // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n      //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n      // }\n\n    }\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // if (!cancelSpans) {\n      //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n      //         row.cells.getCell(i + k).isCellMergeContinue = true;\n      //     }\n      //}\n\n      var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight : this.currentPageBounds.height); // if (size.width === 0) {\n      //     size = new SizeF(row.cells.getCell(i).width, size.height);\n      // }\n      // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n      //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n      //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n      // }\n\n      var cellstyle1 = row.cells.getCell(i).style;\n      row.cells.getCell(i).style = cellstyle1;\n      var skipcell = false;\n      var stringResult = null;\n\n      if (!skipcell) {\n        stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n      } //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n\n\n      if (row.rowBreakHeight > 0.0) {\n        if (stringResult != null && typeof stringResult.remainder !== 'undefined') {\n          row.cells.getCell(i).FinishedDrawingCell = false;\n          row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n          row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n        }\n      }\n\n      result.isFinish = !result.isFinish ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell; // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n      //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n      // if (!cancelSpans) {\n      //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n      //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n      //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n      //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n      //                             row.cells.getCell(i).style);\n      //     }                \n\n      if (row.cells.getCell(i).value instanceof PdfGrid) {\n        var grid = row.cells.getCell(i).value;\n        this.rowBreakPageHeightCellIndex = i; // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n        // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n        //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n        //             this.Grid.listOfNavigatePages.push(pageIndex);\n        //     }\n\n        if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n          location.x = this.rowLayoutBoundsWidth;\n          location.x += grid.style.cellSpacing;\n        } else {\n          location.x += this.Grid.columns.getColumn(i).width;\n        }\n      } else {\n        location.x += this.Grid.columns.getColumn(i).width;\n      }\n    }\n\n    this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n    result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n  };\n  /**\n   * @hidden\n   * @private\n   */\n\n\n  PdfGridLayouter.repeatRowIndex = -1;\n  return PdfGridLayouter;\n}(ElementLayouter);\n\nexport { PdfGridLayouter }; // recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\n\nvar PdfGridLayoutResult =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutResult, _super);\n  /**\n   * Constructor\n   * @private\n   */\n\n\n  function PdfGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n\n  return PdfGridLayoutResult;\n}(PdfLayoutResult);\n\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\n\nvar PdfGridLayoutFormat =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   * @private\n   */\n\n\n  function PdfGridLayoutFormat(baseFormat) {\n    return _super.call(this, baseFormat) || this;\n  }\n\n  return PdfGridLayoutFormat;\n}(PdfLayoutFormat);\n\nexport { PdfGridLayoutFormat };\n\nvar GridCellEventArgs =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initialize a new instance for `GridCellEventArgs` class.\n   * @private\n   */\n  function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n    this.gridRowIndex = rowIndex;\n    this.gridCellIndex = cellIndex;\n    this.internalValue = value;\n    this.gridBounds = bounds;\n    this.pdfGraphics = graphics;\n  }\n\n  Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n    // Properties\n\n    /**\n     * Gets the value of current `row index`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n    /**\n     * Gets the value of current `cell index`.\n     * @private\n     */\n    get: function () {\n      return this.gridCellIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n    /**\n     * Gets the actual `value` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.internalValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n    /**\n     * Gets the `bounds` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.gridBounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n    /**\n     * Gets the instance of `current graphics`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCellEventArgs;\n}();\n\nexport { GridCellEventArgs };\n\nvar PdfGridBeginCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.style = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n    // Properties\n\n    /**\n     * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n     * @private\n     */\n    get: function () {\n      return this.bSkip;\n    },\n    set: function (value) {\n      this.bSkip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n    /**\n     * Gets or sets a `style` value of the cell.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    set: function (value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridBeginCellDrawEventArgs };\n\nvar PdfGridEndCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.cellStyle = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n    // Propertise\n\n    /**\n     * Get the `PdfGridCellStyle`.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridEndCellDrawEventArgs };\n\nvar PdfCancelEventArgs =\n/** @class */\nfunction () {\n  function PdfCancelEventArgs() {}\n\n  Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n    // Properties\n\n    /**\n     * Gets and Sets the value of `cancel`.\n     * @private\n     */\n    get: function () {\n      return this.isCancel;\n    },\n    set: function (value) {\n      this.isCancel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfCancelEventArgs;\n}();\n\nexport { PdfCancelEventArgs };\n\nvar BeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(BeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n   * @private\n   */\n\n\n  function BeginPageLayoutEventArgs(bounds, page) {\n    var _this = _super.call(this) || this;\n\n    _this.bounds = bounds;\n    _this.pdfPage = page;\n    return _this;\n  }\n\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n    // Properties\n\n    /**\n     * Gets or sets value that indicates the lay outing `bounds` on the page.\n     * @private\n     */\n    get: function () {\n      return this.cellBounds;\n    },\n    set: function (value) {\n      this.cellBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n    /**\n     * Gets the `page` where the lay outing should start.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\n\nvar EndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(EndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n   * @private\n   */\n\n\n  function EndPageLayoutEventArgs(result) {\n    var _this = _super.call(this) || this;\n\n    _this.layoutResult = result;\n    return _this;\n  }\n\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n    // Properties\n\n    /**\n     * Gets the lay outing `result` of the page.\n     * @private\n     */\n    get: function () {\n      return this.layoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n    /**\n     * Gets or sets a value indicating the `next page` where the element should be layout.\n     * @private\n     */\n    get: function () {\n      return this.nextPdfPage;\n    },\n    set: function (value) {\n      this.nextPdfPage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridBeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n    var _this = _super.call(this, bounds, page) || this;\n\n    _this.startRow = startRow;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n    // Properties\n\n    /**\n     * Gets the `start row index`.\n     * @private\n     */\n    get: function () {\n      return this.startRow;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs);\n\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridEndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndPageLayoutEventArgs(result) {\n    return _super.call(this, result) || this;\n  }\n\n  return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs);\n\nexport { PdfGridEndPageLayoutEventArgs };\n\nvar RowLayoutResult =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `RowLayoutResult` class.\n   * @private\n   */\n  function RowLayoutResult() {\n    this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n  }\n\n  Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is finish`.\n     * @private\n     */\n    get: function () {\n      return this.bIsFinished;\n    },\n    set: function (value) {\n      this.bIsFinished = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n    /**\n     * Gets or sets the `bounds`.\n     * @private\n     */\n    get: function () {\n      return this.layoutedBounds;\n    },\n    set: function (value) {\n      this.layoutedBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RowLayoutResult;\n}();\n\nexport { RowLayoutResult };","map":{"version":3,"sources":["C:/Users/vinay/Desktop/world-map-dashboard/world-map/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGrid","PdfStringFormat","SizeF","RectangleF","PointF","PdfBorders","PdfLayoutType","PdfLayoutBreakType","PdfLayoutResult","PdfLayoutFormat","ElementLayouter","PdfHorizontalOverflowType","TemporaryDictionary","PdfStringLayouter","PdfDocument","PdfGridLayouter","_super","baseFormat","_this","call","gridInitialWidth","gridSize","parentCellIndex","tempWidth","childheight","isChildGrid","hasRowSpanSpan","isRearranged","pageBounds","listOfNavigatePages","flag","columnRanges","currentLocation","breakRow","slr","remainderText","isPaginate","isOverloadWithPosition","defineProperty","get","elements","enumerable","configurable","getFormat","format","f","layoutInternal","param","gridLayoutFormat","currentPage","page","pageHeight","getClientSize","height","pageWidth","width","currentPageBounds","Error","currentGraphics","graphics","index","section","indexOf","push","break","FitColumnsToPage","currentBounds","bounds","x","y","Grid","columns","clientSize","rows","count","getRow","cells","getCell","style","borders","left","headers","startLocation","hType","horizontalOverflowType","allowHorizontalOverflow","measureColumnsWidth","determineColumnDrawRanges","i","isRowHeightSet","result","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","getColumn","subWidths","j","endArgs","layoutedPages","startPage","isParentCell","cellBounds","length","range","cellStartIndex","cellEndIndex","returnObject","raiseBeforePageLayout","currentRowIndex","drawHeader","i_1","row","getHeader","headerHeight","isHeader","k","isCellMergeContinue","value","headerResult","drawRow","repeatRowIndex","isFinish","layout","OnePage","getNextPageformat","paginateBounds","length_1","repeatRow","startingHeight","originalHeight","grid","rowResult","splitChildRowIndex","isrowFinish","ParentCell","isGridSplit","rowIndex","rowCollection","tempResult","getLayoutResult","raisePageLayouted","cancel","allowRowBreakAcrossPages","location_1","default","right","top","cellPadding","rowBreakHeight","isRowBreaksNextPage","rowBreakHeightValue","bottom","i_2","noOfPageCount","border","newBound","repeatHeader","j_1","headerRepeat","temp","j_2","tempResult1","i_3","header","checkIsFisished","i_4","isAddNextPage","returnValue","usePaginateBounds","i_5","containsKey","add","NestedGridLayoutResult","recalHeight","ReCalculateHeight","secion","startIndex","endIndex","pageGraphics","location_2","c","cell","cellWidth","totalwidth","i_6","columnWidth","Math","max","drawCellBorders","columnSpan","isPdfGrid","maximumCellBoundsWidth","largeNavigatePage","rowLayoutBoundsWidth","pageIndex","pageindex","NextPage","reArrangePages","FinishedDrawingCell","nextPage","getPages","CheckIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","RaiseBeforeCellDraw","cellIndex","args","raiseBeginCellDraw","PdfGridBeginCellDrawEventArgs","onBeginCellDraw","raiseAfterCellDraw","cellstyle","raiseEndCellDraw","PdfGridEndCellDrawEventArgs","onEndCellDraw","document","pages","keys","values","remove","size","count_1","repeatFlag","origin","isChanged","PdfGridLayoutResult","newHeight","remainingString","measureHeight","currentRow","raiseBeginPageLayout","PdfGridBeginPageLayoutEventArgs","onBeginPageLayout","startRowIndex","PdfGridEndPageLayoutEventArgs","raiseEndPageLayout","onEndPageLayout","result_1","RowLayoutResult","rowHeightWithSpan","location_3","rowSpanExists","maxSpan","currRowIndex","rowSpan","calculatedHeight","LayoutFormat","FitPage","drawRowWithBreak","repeatRowNumber","isFit","rowMergeComplete","isFitToCell","Paginate","FitElement","actualSize","remainder","lineCount","skipcell","location_4","cancelSpans","stringFormat","tempValue","stringResult","draw","rowOverflowIndex","undefined","cellSpacing","currentHeight","gridRow","layouter","font","defaultFont","isCustomWidth","calculateHeight","location","gridHeight","cellHeight","cellstyle1","rowBreakPageHeightCellIndex","PdfGridLayoutFormat","GridCellEventArgs","gridRowIndex","gridCellIndex","internalValue","gridBounds","pdfGraphics","bSkip","set","cellStyle","PdfCancelEventArgs","isCancel","BeginPageLayoutEventArgs","pdfPage","EndPageLayoutEventArgs","layoutResult","nextPdfPage","startRow","layoutedBounds","bIsFinished"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\nimport { PdfStringLayouter } from './../../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../../document/pdf-document';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfGridLayouter, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridInitialWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        _this.childheight = 0;\n        /**\n         * Check weather it is `child grid or not`.\n         * @private\n         */\n        _this.isChildGrid = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.hasRowSpanSpan = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.slr = null;\n        _this.remainderText = null;\n        _this.isPaginate = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        _this.isOverloadWithPosition = false;\n        return _this;\n    }\n    Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n        //Properties\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    //Public methods\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n    public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n    public layout(graphics : PdfGraphics, bounds : PointF) : void\n    public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n        if (graphics instanceof PdfGraphics) {\n        if (bounds instanceof PointF) {\n            if (bounds.x === 0) {\n                bounds.x = PdfBorders.default.right.width / 2;\n            }\n            if (bounds.y === 0) {\n                bounds.y = PdfBorders.default.top.width / 2;\n            }\n            let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n            this.layout(graphics, boundaries);\n        } else {\n            let width : number = graphics.clientSize.width;\n            let parameter : PdfLayoutParams = new PdfLayoutParams();\n            parameter.bounds = bounds;\n            this.currentGraphics = graphics;\n            if (graphics.layer != null) {\n                let index : number = 0;\n                if (this.currentGraphics.page instanceof PdfPage) {\n                    index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                } else {\n                    index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n                }\n            } else {\n                this.layoutInternal(parameter);\n            }\n        }\n    }\n    }*/\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutInternal = function (param) {\n        var format = this.getFormat(param.format);\n        this.gridLayoutFormat = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            var pageHeight = this.currentPage.getClientSize().height;\n            var pageWidth = this.currentPage.getClientSize().width;\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        else {\n            throw Error('Can not set page as null');\n            //this.currentPageBounds = this.currentGraphics.clientSize;\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n        // if (this.currentGraphics.layer !== null) {\n        //     let index : number = 0;\n        //     if (this.currentGraphics.page instanceof PdfPage) {\n        //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n        //     } else {\n        //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n        //     }\n        //     this.listOfNavigatePages.push(index);\n        // }\n        var index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.Grid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.Grid.headers.count !== 0) {\n            // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n            //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n        //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n        //     this.currentBounds.width -= this.currentBounds.x;\n        // }\n        // if (this.Grid.isChildGrid) {\n        //     this.childheight = param.bounds.height;\n        // }\n        // if (param.format !== null && param.format.usePaginateBounds) {\n        //     if (param.format.paginateBounds.height > 0) {\n        //         this.currentBounds.height = param.format.paginateBounds.height;\n        //     }\n        //} else \n        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.Grid.isChildGrid) {\n            this.hType = this.Grid.style.horizontalOverflowType;\n        }\n        if (!this.Grid.style.allowHorizontalOverflow) {\n            this.columnRanges = [];\n            if (typeof this.Grid.isChildGrid !== 'undefined' && typeof this.Grid.isChildGrid) {\n                this.Grid.measureColumnsWidth(this.currentBounds);\n            }\n            else {\n                this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));\n            }\n            this.columnRanges.push([0, this.Grid.columns.count - 1]);\n        }\n        else {\n            this.Grid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        if (this.Grid.hasRowSpanSpan) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n                    this.Grid.rows.getRow(i).isRowHeightSet = true;\n                }\n            }\n        }\n        var result = this.layoutOnPage(param);\n        return result;\n    };\n    // /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.Grid.columns.count; i++) {\n            cellWidths += this.Grid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.Grid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n        // }\n    };\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutOnPage = function (param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        var format = this.getFormat(param.format);\n        var endArgs = null;\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        var isParentCell = false;\n        var cellBounds = [];\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            //     break;\n            // }\n            //Draw Headers.\n            var drawHeader = void 0;\n            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n                var row = this.Grid.headers.getHeader(i_1);\n                var headerHeight = this.currentBounds.y;\n                this.isHeader = true;\n                if (startPage != this.currentPage) {\n                    for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {\n                        if (row.cells.getCell(k).isCellMergeContinue) {\n                            row.cells.getCell(k).isCellMergeContinue = false;\n                            row.cells.getCell(k).value = \"\";\n                        }\n                    }\n                }\n                // RowLayoutResult\n                var headerResult = this.drawRow(row);\n                if (headerHeight === this.currentBounds.y) {\n                    drawHeader = true;\n                    if (PdfGridLayouter.repeatRowIndex === -1) {\n                        PdfGridLayouter.repeatRowIndex = i_1;\n                    }\n                }\n                else {\n                    drawHeader = false;\n                }\n                if (!headerResult.isFinish && startPage !== null\n                    && format.layout !== PdfLayoutType.OnePage && drawHeader) {\n                    this.startLocation.x = this.currentBounds.x;\n                    this.currentPage = this.getNextPageformat(format);\n                    this.startLocation.y = this.currentBounds.y;\n                    if (typeof format.paginateBounds !== 'undefined' && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0)\n                        this.currentBounds.x += this.startLocation.x;\n                    this.drawRow(row);\n                }\n                this.isHeader = false;\n            }\n            var i = 0;\n            var length_1 = this.Grid.rows.count;\n            var repeatRow = void 0;\n            var startingHeight = 0;\n            var flag = true;\n            //Here is to draw parent Grid and Cells\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < this.Grid.rows.count; j++) {\n                var row = this.Grid.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                var originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGridLayouter.repeatRowIndex = -1;\n                if (flag && row.grid.isChildGrid) {\n                    startingHeight = originalHeight;\n                    flag = false;\n                }\n                var rowResult = null;\n                ///rowResult = this.drawRow(row);\n                /*if(!row.isrowFinish) {\n                    if(!row.grid.isgridSplit){\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                        row.isrowDraw = true;\n                    } else {\n                        if(!row.isrowDraw){\n                            rowResult = this.drawRow(row);\n                            row.isrowFinish = true;\n                            row.isrowDraw = true;\n                            row.grid.isgridSplit = false;\n                        } else {\n                            rowResult =  null;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    //row.isrowFinish = false;\n                    //rowResult = this.drawRow(row);\n                    rowResult = null;\n                    break;\n                    \n                }             */\n                if (this.Grid.splitChildRowIndex == -1) {\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                }\n                else {\n                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                    }\n                    else if (row.isrowFinish) {\n                        continue;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                //rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                /*if (row.isRowBreaksNextPage)\n                    {\n                        let x : number  = 0;\n                        for (let l : number = 0; l < row.cells.count; l++)\n                        {\n                            let isNestedRowBreak : boolean = false;\n                            if (row.height == row.cells.getCell(l).height)\n                            {\n                                let n : number;\n                                let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                                for (let m : number = grid.rows.count; 0 < m; m--)\n                                {\n                                    if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                                    {\n                                        isNestedRowBreak = true;\n                                        break;\n                                    }\n                                    if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                                    {\n                                        row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                        break;\n                                    }\n                                    row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                                }\n                            }\n                            if (isNestedRowBreak)\n                                break;\n                        }\n                        for (let j : number = 0; j < row.cells.count; j++)\n                        {\n\n                            if (row.height > row.cells.getCell(j).height)\n                            {\n                                row.cells.getCell(j).value = \" \";\n                                let rect : RectangleF ;\n                                let page : PdfPage = this.getNextPage(this.currentPage);\n                                let section : PdfSection = this.currentPage.section;\n                                let index : number = section.indexOf(page);\n                                for (let k : number = 0; k < (section.count - 1) - index; k++)\n                                {\n                                    rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                                    PdfGridLayouter.repeatRowIndex = -1;\n                                    row.cells.getCell(j).draw(page.graphics, rect, false);\n                                    page = this.getNextPage(page);\n                                }\n                                rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n\n                                row.cells.getCell(j).draw(page.graphics, rect, false);\n                            }\n                            x += row.grid.columns.getColumn(j).width;\n                        }\n                    }*/\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGridLayouter.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage != null) {\n                    var tempResult = this.getLayoutResult();\n                    /*if (startPage != this.currentPage)\n                        {\n                            if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            {\n                                let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                                bounds.x += param.bounds.x;\n                                if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                                {\n                                    bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                                    if (bounds.height > this.currentPageBounds.height)\n                                    {\n                                        bounds.height = this.currentPageBounds.height - bounds.y;\n                                        bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                                    }\n                                }\n                                // Draw border for cells in the nested grid cell's row.\n                                for (let c : number = 0; c < row.cells.count; c++)\n                                {\n                                    let cell : PdfGridCell = row.cells.getCell(c);\n                                    let cellWidth :  number= 0;\n                                    if (cell.columnSpan > 1)\n                                    {\n                                        for (; c < cell.columnSpan; c++)\n                                            cellWidth += row.grid.columns.getColumn(c).width;\n                                    }\n                                    else\n                                        cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                                    cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                                    bounds.x += cellWidth;\n                                    c += (cell.columnSpan - 1);\n                                }\n                            }\n                        }\n                        */\n                    endArgs = this.raisePageLayouted(tempResult);\n                    if (endArgs.cancel || repeatRow)\n                        break;\n                    else if (this.Grid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageformat(format);\n                        originalHeight = this.currentBounds.y;\n                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                        if ((format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 &&\n                            format.paginateBounds.height === 0) && (this.startLocation.x === location_1.x && this.startLocation.y === location_1.y)) {\n                            this.currentBounds.x += this.startLocation.x;\n                            this.currentBounds.y += this.startLocation.y;\n                        }\n                        if (this.isPaginate) {\n                            this.startLocation.y = this.currentBounds.y;\n                            this.isPaginate = false;\n                        }\n                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                                }\n                            }\n                        }\n                        if (row.grid.ParentCell != null) {\n                            row.grid.ParentCell.row.isRowBreaksNextPage = true;\n                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n                            }\n                            //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n                        }\n                        /*if (row.noOfPageCount > 1)\n                        {\n                            let temp : number = row.rowBreakHeightValue;\n                            for (let j : number = 1; j < row.noOfPageCount; j++)\n                            {\n                                row.rowBreakHeightValue = 0;\n                                row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                this.drawRow(row);\n                                this.currentPage = this.getNextPageformat(format);\n                                startPage = this.currentPage;\n                            }\n                            row.rowBreakHeightValue = temp;\n                            row.noOfPageCount = 1;\n                            rowResult = this.drawRow(row);\n                        } else {\n                            rowResult = this.drawRow(row);\n                        }\n                        /*if(row.grid.isChildGrid){\n                            row.isrowFinish = false;\n                            row.isrowDraw = false;\n                            row.grid.isgridSplit = true;\n                            row.grid.ParentCell.row.grid.isgridSplit = true;\n                            //rowResult.isFinish = false;\n                            break;\n                        }*/\n                        if (row.grid.isChildGrid) {\n                            //row.grid.isgridSplit = true;\n                            row.isrowFinish = false;\n                            //row.grid.ParentCell.row.grid.isgridSplit = true;\n                            row.grid.splitChildRowIndex = row.rowIndex;\n                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n                            if (row.grid.ParentCell.row.grid.isGridSplit) {\n                                row.grid.ParentCell.row.noOfPageCount += 1;\n                                row.grid.ParentCell.row.grid.isGridSplit = false;\n                            }\n                            break;\n                        }\n                        if (row.noOfPageCount < 1) {\n                            if (row.grid.splitChildRowIndex != -1) {\n                                row.grid.isGridSplit = true;\n                            }\n                            if (row.style.border != null && ((row.style.border.left != null && row.style.border.left.width !== 1)\n                                || (row.style.border.top != null && row.style.border.top.width !== 1))) {\n                                var x = row.style.border.left.width / 2;\n                                var y = row.style.border.top.width / 2;\n                                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                                    var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                                    this.currentBounds = newBound;\n                                }\n                            }\n                            if (this.Grid.repeatHeader) {\n                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                                    var headerRepeat = this.Grid.headers.getHeader(j_1);\n                                    this.drawRow(headerRepeat);\n                                }\n                            }\n                            rowResult = this.drawRow(row);\n                            if (row.noOfPageCount >= 1) {\n                                var temp = row.rowBreakHeightValue;\n                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                                    //this.currentPage.section.add();\n                                    var tempResult1 = this.getLayoutResult();\n                                    endArgs = this.raisePageLayouted(tempResult1);\n                                    this.currentPage = this.getNextPageformat(format);\n                                    originalHeight = this.currentBounds.y;\n                                    //row.rowBreakHeightValue = 0;\n                                    if (row.grid.splitChildRowIndex != -1) {\n                                        row.grid.isGridSplit = true;\n                                    }\n                                    this.currentBounds.y = 0.5;\n                                    if (this.Grid.repeatHeader) {\n                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                                            var header = this.Grid.headers.getHeader(i_3);\n                                            this.drawRow(header);\n                                        }\n                                    }\n                                    //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                    this.drawRow(row);\n                                }\n                                // row.rowBreakHeight = temp;\n                                // row.noOfPageCount = 1;\n                                // rowResult = this.drawRow(row);\n                            }\n                            row.grid.splitChildRowIndex = -1;\n                            row.grid.isGridSplit = false;\n                            rowResult.isFinish = this.checkIsFisished(row);\n                            //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n                            //this.currentBounds.y = rowResult.bounds.y;\n                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                                }\n                            }\n                        }\n                    }\n                    // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n                    // {\n                    //     this.currentPage = this.getNextPageformat(format);\n                    //     break;\n                    // }\n                    // else if (i >= length)\n                    //     break;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    var isAddNextPage = false;\n                    this.currentPage = this.getNextPageformat(format);\n                    /*if (!this.Grid.isSingleGrid)\n                    {\n                        for ( let j : number= 0; j < this.Grid.rows.count; j++)\n                        {\n                            let isWidthGreaterthanParent : boolean = false;\n                            for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                            {\n                                if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                                    isWidthGreaterthanParent = true;\n                            }\n                            if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                            {\n                                isAddNextPage = true;\n                            }\n                        }\n                    }\n                    if (!this.Grid.isRearranged && isAddNextPage)\n                         {\n                             let section : PdfSection = this.currentPage.section;\n                             \n                             //this.currentPage = section.add();\n                         \n                             this.currentGraphics = this.currentPage.graphics;\n                             this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                          \n                             let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                         }\n                         else\n                         {\n                             this.currentPage = this.getNextPageformat(format);\n                         }\n                         if (format.paginateBounds.y == 0)\n                             this.currentBounds.y = PdfBorders.default.top.width/2;\n                         else\n                         {\n                             this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                             \n                         }*/\n                    if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {\n                        break;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if (typeof param.format !== 'undefined' && param.format != null && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {\n                        this.currentBounds.y = PdfBorders.default.top.width / 2;\n                    }\n                    else {\n                        this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                        if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {\n                            this.currentBounds.x = format.paginateBounds.x;\n                            this.currentBounds.width = format.paginateBounds.width;\n                            this.currentBounds.height = format.paginateBounds.height;\n                        }\n                    }\n                    if (typeof param.format !== 'undefined' && (param.format !== null) && typeof param.format.usePaginateBounds !== 'undefined' && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.Grid.repeatHeader) {\n                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n                            var header = this.Grid.headers.getHeader(i_5);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n                if (row.NestedGridLayoutResult != null) {\n                    // Position for next row in the grid.\n                    this.currentPage = row.NestedGridLayoutResult.page;\n                    this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n                    this.currentBounds.y = recalHeight;\n                    //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n                    if (startPage != this.currentPage) {\n                        var secion = this.currentPage.section;\n                        var startIndex = secion.indexOf(startPage) + 1;\n                        var endIndex = secion.indexOf(this.currentPage);\n                        for (var page = startIndex; page < endIndex + 1; page++) {\n                            var pageGraphics = this.currentPage.graphics;\n                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :\n                                (this.currentBounds.height - location_2.y);\n                            if (height <= pageGraphics.clientSize.height)\n                                height += param.bounds.y;\n                            // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            //     location.x += param.bounds.x;\n                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n                            // Draw border for last paginated row containing nested grid.\n                            for (var c = 0; c < row.cells.count; c++) {\n                                var cell = row.cells.getCell(c);\n                                var cellWidth = 0;\n                                var totalwidth = 0;\n                                if (cell.value instanceof PdfGrid) {\n                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                                    }\n                                }\n                                else {\n                                    totalwidth = cell.width;\n                                }\n                                // if (cell.columnSpan > 1)\n                                // {\n                                //     for (; c < cell.columnSpan; c++)\n                                //         cellWidth += row.grid.columns.getColumn(c).width;\n                                // }\n                                // else\n                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                                location_2.x += cellWidth;\n                                c += (cell.columnSpan - 1);\n                            }\n                        }\n                        // So, nested grid drawing is completed for the current row. Update page.\n                        // Otherwise, the next nested grid of the parent will draw borders from start.\n                        startPage = this.currentPage;\n                    }\n                }\n            }\n            var isPdfGrid = false;\n            var maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            var largeNavigatePage = [[1, 2]];\n            for (var c = 0; c < this.Grid.rows.count; c++) {\n                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n                    isPdfGrid = true;\n                    // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n                    // {\n                    //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                    // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n                    // {\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                }\n            }\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (var c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1\n                && startPage != null && format.layout != PdfLayoutType.OnePage) {\n                isParentCell = this.Grid.isChildGrid;\n                if (largeNavigatePage[0][0] != 0) {\n                    var section = this.currentPage.section;\n                    var pageIndex = section.indexOf(this.currentPage);\n                    this.currentGraphics = this.currentPage.graphics;\n                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n                }\n                else {\n                    this.currentPage = this.getNextPageformat(format);\n                }\n                // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n                // {\n                //     this.currentBounds.x += this.startLocation.x;\n                //     this.currentBounds.y += this.startLocation.y;\n                // }\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageformat(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    //this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    };\n    PdfGridLayouter.prototype.checkIsFisished = function (row) {\n        var result = true;\n        for (var i = 0; i < row.cells.count; i++) {\n            if (!row.cells.getCell(i).FinishedDrawingCell) {\n                result = false;\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getNextPageformat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        if ((typeof format !== 'undefined') && format != null && format.usePaginateBounds && (typeof format.paginateBounds !== 'undefined') && format.paginateBounds != null && (format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n            && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n            this.currentBounds.x = format.paginateBounds.x;\n            this.currentBounds.y = format.paginateBounds.y;\n            this.currentBounds.height = format.paginateBounds.height;\n        }\n        return nextPage;\n    };\n    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n        var args = null;\n        if (this.Grid.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.Grid.onBeginCellDraw(args);\n            style = args.style;\n        }\n        return style;\n    };\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        var args = null;\n        if (this.Grid.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.Grid.onEndCellDraw(args);\n        }\n    };\n    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutedPages.keys();\n        var values = layoutedPages.values();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (var i = 0; i < layoutedPages.size(); i++) {\n            var count = 0;\n            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {\n                var page = pages[j];\n                if (typeof page !== 'undefined' && document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getLayoutResult = function () {\n        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var row = this.Grid.rows.getRow(i);\n                if (row.rowBreakHeight > 0 && row.repeatFlag) {\n                    this.startLocation.y = this.currentPage.origin.y;\n                }\n            }\n        }\n        var bounds;\n        if (!this.isChanged) {\n            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n                this.startLocation.y));\n        }\n        // else {\n        //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n        //                              this.currentLocation.y));\n        // }\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n        var newHeight = 0.0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||\n                typeof row.cells.getCell(i).remainingString === 'undefined')) {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n        var cancel = false;\n        if (this.Grid.raiseBeginPageLayout) {\n            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.Grid.onBeginPageLayout(args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = (typeof args.cancel === 'undefined' ? false : args.cancel);\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    };\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n        var args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.Grid.raiseEndPageLayout) {\n            this.Grid.onEndPageLayout(args);\n        }\n        return args;\n    };\n    PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n            var result_1 = new RowLayoutResult();\n            var rowHeightWithSpan = 0;\n            var location_3 = new PointF(0, 0);\n            var size = new SizeF(0, 0);\n            var isHeader = false;\n            if (row.rowSpanExists) {\n                var maxSpan = 0;\n                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.Grid.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (var i = 0; i < row.cells.count; i++) {\n                    var cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);\n                }\n                // let rowMaxHeight : number = rowHeightWithSpan;\n                // for (let i : number = 0; i < row.cells.count; i++ ) {\n                //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                // }\n                // let flag : boolean = true;\n                // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n                // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n                //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                //         flag = false;\n                //         break;\n                //     }\n                // }\n                // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                //     row.height += (rowMaxHeight - rowHeightWithSpan);\n                // }                \n            }\n            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (typeof this.Grid.isChildGrid !== 'undefined' && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== 'undefined' && this.Grid.ParentCell != null) {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n                //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n                //     if (this.Grid.allowRowBreakAcrossPages) {\n                //         result.isFinish = true;\n                //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n                //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n                //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             }\n                //             this.currentBounds.x = this.startLocation.x;\n                //         }\n                //         result.bounds = this.currentBounds ;\n                //         this.drawRowWithBreak(result, row, calculatedHeight);\n                //     } else {\n                //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n                //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n                //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                //         }\n                //         result.isFinish = false;\n                //         this.drawRow( row, result, calculatedHeight);\n                //     }\n                // } else\n                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >\n                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom\n                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +\n                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n                    //If a row is repeated and still cannot fit in page, proceed draw.\n                    if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== 'undefined' && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n                            //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                            //     // }\n                            //     this.currentBounds.x = this.startLocation.x;\n                            // }\n                            result_1.bounds = this.currentBounds;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     row.repeatFlag = false;\n                        //     this.drawRow( row, result, calculatedHeight);\n                        // }\n                    }\n                    // else {\n                    //     result.isFinish = false;\n                    // }\n                }\n                else {\n                    result_1.isFinish = true;\n                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n                        row.repeatFlag = true;\n                    }\n                    else {\n                        row.repeatFlag = false;\n                        calculatedHeight = row.height;\n                    }\n                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                        }\n                    }\n                    this.drawRow(row, result_1, calculatedHeight);\n                }\n            }\n            else {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                if (calculatedHeight > this.currentPageBounds.height) {\n                    if (this.Grid.allowRowBreakAcrossPages) {\n                        result_1.isFinish = true;\n                        //result.bounds = this.currentBounds;\n                        this.drawRowWithBreak(result_1, row, calculatedHeight);\n                        row.isrowFinish = true;\n                        row.repeatFlag = true;\n                        if (row.grid.splitChildRowIndex !== -1) {\n                            result_1.isFinish = false;\n                        }\n                    }\n                    // else {\n                    //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    //     result.isFinish = false;\n                    //     this.drawRow( row, result, calculatedHeight);\n                    // }\n                }\n                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                    // If a row is repeated and still cannot fit in page, proceed draw.\n                    var isFit = false;\n                    if ((this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row.isRowHeightSet && !row.rowMergeComplete)) {\n                        if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {\n                            isFit = this.isFitToCell((this.currentBounds.height + this.startLocation.y) - this.currentBounds.y, this.Grid, row);\n                        }\n                        else\n                            isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n                        if (isFit) {\n                            this.isPaginate = true;\n                        }\n                    }\n                    else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {\n                        isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row);\n                        if (!isFit)\n                            isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);\n                        if (isFit && this.slr != null && this.slr.lineCount > 1) {\n                            //It may text cutoff issue\n                            isFit = false;\n                        }\n                        this.remainderText = null;\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex || isFit) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                            if (row.grid.splitChildRowIndex !== -1) {\n                                result_1.isFinish = false;\n                            }\n                        }\n                        else {\n                            result_1.isFinish = false;\n                            this.drawRow(row, result_1, calculatedHeight);\n                        }\n                    }\n                    else {\n                        result_1.isFinish = false;\n                    }\n                }\n                else {\n                    result_1.isFinish = true;\n                    this.drawRow(row, result_1, calculatedHeight);\n                    row.repeatFlag = false;\n                }\n            }\n            return result_1;\n        }\n        else {\n            var skipcell = false;\n            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n            //                 this.currentPage.getClientSize().width) {\n            //     location.x = this.startLocation.x;\n            // }\n            result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.clientSize.width) {\n                //     size.width = this.currentGraphics.clientSize.width;\n                // }\n                // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.clientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n                }\n                var cellstyle = row.cells.getCell(i).style;\n                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n                //row.cells.getCell(i).style = cellstyle;\n                if (!skipcell) {\n                    if (row.cells.getCell(i).value instanceof PdfGrid) {\n                        var grid = row.cells.getCell(i).value;\n                        grid.parentCellIndex = i;\n                    }\n                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||\n                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                        row.rowOverflowIndex = this.cellEndIndex;\n                    }\n                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >\n                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&\n                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?\n                            stringResult.remainder : '' : '';\n                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                    }\n                }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                if (!cancelSpans) {\n                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n                }\n                if (row.cells.getCell(i).value instanceof PdfGrid) {\n                    var grid = row.cells.getCell(i).value;\n                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                        location_4.x = grid.rowLayoutBoundsWidth;\n                        location_4.x += grid.style.cellSpacing;\n                    }\n                    else {\n                        location_4.x += this.Grid.columns.getColumn(i).width;\n                    }\n                }\n                else {\n                    location_4.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            if (!row.rowMergeComplete || row.isRowHeightSet) {\n                this.currentBounds.y += height;\n            }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n        }\n    };\n    PdfGridLayouter.prototype.isFitToCell = function (currentHeight, grid, gridRow) {\n        var isFit = false;\n        var layouter = new PdfStringLayouter();\n        for (var i = 0; i < gridRow.cells.count; i++) {\n            var cell = gridRow.cells.getCell(i);\n            if (typeof cell.value !== 'undefined' && cell.value !== null && typeof cell.value === 'string') {\n                var font = null;\n                if (typeof cell.style.font !== 'undefined' && cell.style.font != null) {\n                    font = cell.style.font;\n                }\n                else if (typeof cell.row.style.font !== 'undefined' && cell.row.style.font != null) {\n                    font = cell.row.style.font;\n                }\n                else if (typeof cell.row.grid.style.font !== 'undefined' && cell.row.grid.style.font != null) {\n                    font = cell.row.grid.style.font;\n                }\n                else {\n                    font = PdfDocument.defaultFont;\n                }\n                this.remainderText = gridRow.cells.getCell(i).value;\n                var width = gridRow.cells.getCell(i).width;\n                if (grid.columns.getColumn(i).isCustomWidth && gridRow.cells.getCell(i).width > grid.columns.getColumn(i).width) {\n                    width = grid.columns.getColumn(i).width;\n                }\n                this.slr = layouter.layout(gridRow.cells.getCell(i).value, font, gridRow.cells.getCell(i).stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);\n                var height = this.slr.actualSize.height;\n                if (height == 0) {\n                    isFit = false;\n                    break;\n                }\n                if (gridRow.cells.getCell(i).style != null && gridRow.cells.getCell(i).style.borders != null && gridRow.cells.getCell(i).style.borders.top != null && gridRow.cells.getCell(i).style.borders.bottom != null)\n                    height += (gridRow.cells.getCell(i).style.borders.top.width + gridRow.cells.getCell(i).style.borders.bottom.width) * 2;\n                if (this.slr.lineCount > 1 && gridRow.cells.getCell(i).stringFormat != null && gridRow.cells.getCell(i).stringFormat.lineSpacing != 0)\n                    height += (this.slr.lineCount - 1) * (gridRow.cells.getCell(i).style.stringFormat.lineSpacing);\n                if (gridRow.cells.getCell(i).style.cellPadding == null) {\n                    height += (grid.style.cellPadding.top + grid.style.cellPadding.bottom);\n                }\n                else {\n                    height += (grid.style.cellPadding.top + grid.style.cellPadding.bottom);\n                }\n                height += grid.style.cellSpacing;\n                if (currentHeight > height || (typeof this.slr.remainder !== 'undefined' && this.slr.remainder !== null)) {\n                    isFit = true;\n                    break;\n                }\n            }\n        }\n        return isFit;\n    };\n    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n            location.x = this.startLocation.x;\n        }\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n        // Calculate the remaining height.\n        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n        }\n        // else {\n        //     row.rowBreakHeight = calculateHeight;\n        //     result.isFinish = false;\n        //     return;\n        // }\n        // No need to explicit break if the row height is equal to grid height.\n        for (var i = 0; i < row.cells.count; i++) {\n            var cell = row.cells.getCell(i);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n                row.rowBreakHeight = 0;\n            }\n            // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n            //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n            // }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&\n                (row.cells.getCell(i).columnSpan > 1));\n            // if (!cancelSpans) {\n            //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n            //         row.cells.getCell(i + k).isCellMergeContinue = true;\n            //     }\n            //}\n            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :\n                this.currentPageBounds.height);\n            // if (size.width === 0) {\n            //     size = new SizeF(row.cells.getCell(i).width, size.height);\n            // }\n            // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n            //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n            //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n            // }\n            var cellstyle1 = row.cells.getCell(i).style;\n            row.cells.getCell(i).style = cellstyle1;\n            var skipcell = false;\n            var stringResult = null;\n            if (!skipcell) {\n                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n            }\n            //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n            if (row.rowBreakHeight > 0.0) {\n                if (stringResult != null && typeof stringResult.remainder !== 'undefined') {\n                    row.cells.getCell(i).FinishedDrawingCell = false;\n                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n                    row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n                }\n            }\n            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n            // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n            //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n            // if (!cancelSpans) {\n            //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n            //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n            //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n            //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n            //                             row.cells.getCell(i).style);\n            //     }                \n            if (row.cells.getCell(i).value instanceof PdfGrid) {\n                var grid = row.cells.getCell(i).value;\n                this.rowBreakPageHeightCellIndex = i;\n                // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n                // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n                //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n                //             this.Grid.listOfNavigatePages.push(pageIndex);\n                //     }\n                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                    location.x = this.rowLayoutBoundsWidth;\n                    location.x += grid.style.cellSpacing;\n                }\n                else {\n                    location.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            else {\n                location.x += this.Grid.columns.getColumn(i).width;\n            }\n        }\n        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    PdfGridLayouter.repeatRowIndex = -1;\n    return PdfGridLayouter;\n}(ElementLayouter));\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutResult, _super);\n    /**\n     * Constructor\n     * @private\n     */\n    function PdfGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    function PdfGridLayoutFormat(baseFormat) {\n        return _super.call(this, baseFormat) || this;\n    }\n    return PdfGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n    Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n        // Properties\n        /**\n         * Gets the value of current `row index`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n        /**\n         * Gets the value of current `cell index`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n        /**\n         * Gets the actual `value` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.gridBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n        /**\n         * Gets the instance of `current graphics`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GridCellEventArgs;\n}());\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.style = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n         * @private\n         */\n        get: function () {\n            return this.bSkip;\n        },\n        set: function (value) {\n            this.bSkip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n        /**\n         * Gets or sets a `style` value of the cell.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.cellStyle = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n        // Propertise\n        /**\n         * Get the `PdfGridCellStyle`.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */ (function () {\n    function PdfCancelEventArgs() {\n    }\n    Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `cancel`.\n         * @private\n         */\n        get: function () {\n            return this.isCancel;\n        },\n        set: function (value) {\n            this.isCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCancelEventArgs;\n}());\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(BeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    function BeginPageLayoutEventArgs(bounds, page) {\n        var _this = _super.call(this) || this;\n        _this.bounds = bounds;\n        _this.pdfPage = page;\n        return _this;\n    }\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n        // Properties\n        /**\n         * Gets or sets value that indicates the lay outing `bounds` on the page.\n         * @private\n         */\n        get: function () {\n            return this.cellBounds;\n        },\n        set: function (value) {\n            this.cellBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `page` where the lay outing should start.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(EndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    function EndPageLayoutEventArgs(result) {\n        var _this = _super.call(this) || this;\n        _this.layoutResult = result;\n        return _this;\n    }\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n        // Properties\n        /**\n         * Gets the lay outing `result` of the page.\n         * @private\n         */\n        get: function () {\n            return this.layoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n        /**\n         * Gets or sets a value indicating the `next page` where the element should be layout.\n         * @private\n         */\n        get: function () {\n            return this.nextPdfPage;\n        },\n        set: function (value) {\n            this.nextPdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n        var _this = _super.call(this, bounds, page) || this;\n        _this.startRow = startRow;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n        // Properties\n        /**\n         * Gets the `start row index`.\n         * @private\n         */\n        get: function () {\n            return this.startRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs));\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndPageLayoutEventArgs(result) {\n        return _super.call(this, result) || this;\n    }\n    return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs));\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    function RowLayoutResult() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n    Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is finish`.\n         * @private\n         */\n        get: function () {\n            return this.bIsFinished;\n        },\n        set: function (value) {\n            this.bIsFinished = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets or sets the `bounds`.\n         * @private\n         */\n        get: function () {\n            return this.layoutedBounds;\n        },\n        set: function (value) {\n            this.layoutedBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowLayoutResult;\n}());\nexport { RowLayoutResult };\n"]},"metadata":{},"sourceType":"module"}